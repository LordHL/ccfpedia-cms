<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.ccf.ccfpedia.cms.dao.TaskViewMapper">
  <resultMap id="BaseResultMap" type="org.ccf.ccfpedia.cms.bean.TaskViewBean">
    <id column="id" jdbcType="CHAR" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="description" jdbcType="VARCHAR" property="description" />
      <result column="creation_time" jdbcType="TIMESTAMP" property="creationTime" />
    <result column="deadline" jdbcType="TIMESTAMP" property="deadline" />
    <result column="state_name" jdbcType="VARCHAR" property="statusName" />
    <result column="memo" jdbcType="VARCHAR" property="memo" />
      <association column="expert_id" property="expert" select="org.ccf.ccfpedia.cms.dao.GroupMapper.selectSimpleByPrimaryKey" javaType="org.ccf.ccfpedia.cms.bean.GroupBean"/>
      <association column="founder_id" property="founder" select="org.ccf.ccfpedia.cms.dao.UserMapper.selectSimpleByPrimaryKey" javaType="org.ccf.ccfpedia.cms.bean.UserBean"/>
      <association column="committee_id" property="committee" select="org.ccf.ccfpedia.cms.dao.UserMapper.selectSimpleByPrimaryKey" javaType="org.ccf.ccfpedia.cms.bean.UserBean"/>
      <association column="executor_id" property="executor" select="org.ccf.ccfpedia.cms.dao.UserMapper.selectSimpleByPrimaryKey" javaType="org.ccf.ccfpedia.cms.bean.UserBean"/>
      <collection column="id" property="entry" select="org.ccf.ccfpedia.cms.dao.EntryMapper.selectEntryByTaskId" />
  </resultMap>

  <sql id="Base_Column_List">
    id, name,description,founder_id,creation_time,committee_id,executor_id,deadline,status_name,memo
  </sql>

  <select id="selectTaskViewList" resultMap="BaseResultMap">
    select
    task.*,task_status.name AS state_name
    from `task`
    INNER JOIN `task_status` on task.status_id = task_status.id
    where true
    <if test="userId != null">
      <if test="roleId == 1">
         and founder_id = #{userId,jdbcType=INTEGER}
      </if>
      <if test="roleId == 2">
         and committee_id = #{userId,jdbcType=INTEGER}
      </if>
      <if test="roleId == 3">
         and executor_id = #{userId,jdbcType=INTEGER}
      </if>
    </if>
      <if test="statusId != null">
          and status_id = #{statusId,jdbcType=INTEGER}
      </if>
      <if test="keyword != null">
         and task.name like CONCAT('%',#{keyword},'%')
      </if>
      order by creation_time DESC
    <if test=" pageNo!= null">
      limit #{pageNo,jdbcType=INTEGER}
    </if>
    <if test="pageSize != null">
      offset #{pageSize,jdbcType=INTEGER}
    </if>
  </select>

    <select id="selectTaskViewListNew" resultMap="BaseResultMap">
        select
        task.*,task_status.name AS state_name,group.id as expert_id
        from `task`, `task_status` ,`user`, `group`
        where task.status_id = task_status.id and user.group_id = group.id and task.committee_id = user.id
        <if test="userId != null">
            <if test="roleId == 1">
                and founder_id = #{userId,jdbcType=INTEGER}
            </if>
            <if test="roleId == 2">
                and committee_id = #{userId,jdbcType=INTEGER}
            </if>
            <if test="roleId == 3">
                and executor_id = #{userId,jdbcType=INTEGER}
            </if>
        </if>
        <if test="status != null">
            and task.status_id in
            <foreach collection="status" index="index" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="keyword != null">
            and task.name like CONCAT('%',#{keyword},'%')
        </if>
        order by creation_time DESC
        <if test=" pageNo!= null">
            limit #{pageNo,jdbcType=INTEGER}
        </if>
        <if test="pageSize != null">
            offset #{pageSize,jdbcType=INTEGER}
        </if>
    </select>

    <select id="selectById" resultMap="BaseResultMap">
        select
        task.*,task_status.name AS state_name,group.id as expert_id
        from `task`, `task_status` ,`user`, `group`, `task_entry`
        where task.status_id = task_status.id and user.group_id = group.id and task.committee_id = user.id and task.id = task_entry.Task_id
        and task.id = #{taskId,jdbcType=INTEGER}
    </select>

  <select id="getCount" resultType="java.lang.Integer">
    select count(*)
    from task
      where true
      <if test="userId != null">
          <if test="roleId == 1">
              and founder_id = #{userId,jdbcType=INTEGER}
          </if>
          <if test="roleId == 2">
              and committee_id = #{userId,jdbcType=INTEGER}
          </if>
          <if test="roleId == 3">
              and executor_id = #{userId,jdbcType=INTEGER}
          </if>
      </if>
      <if test="statusId != null">
          and status_id = #{statusId,jdbcType=INTEGER}
      </if>
      <if test="keyword != null">
          and task.name like CONCAT('%',#{keyword},'%')
      </if>
  </select>

    <select id="getCountNew" resultType="java.lang.Integer">
        select count(*)
        from task
        where true
        <if test="userId != null">
            <if test="roleId == 1">
                and founder_id = #{userId,jdbcType=INTEGER}
            </if>
            <if test="roleId == 2">
                and committee_id = #{userId,jdbcType=INTEGER}
            </if>
            <if test="roleId == 3">
                and executor_id = #{userId,jdbcType=INTEGER}
            </if>
        </if>
        <if test="status != null">
            and status_id in
            <foreach collection="status" index="index" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="keyword != null">
            and name like CONCAT('%',#{keyword},'%')
        </if>
    </select>

  <select id="selectByCommitteeId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    task.*,task_status.name AS state_name
    from `task`
    INNER JOIN `task_status` on task.status_id = task_status.id
    where founder_id = #{id,jdbcType=INTEGER}
  </select>

  <select id="selectByCommitteeAndState" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    task.*,task_status.name AS state_name
    from `task`
    INNER JOIN `task_status` on task.status_id = task_status.id
    where founder_id = #{id,jdbcType=INTEGER} and task.status_id = #{statusId,jdbcType=INTEGER}
  </select>

  <select id="committeeAllCount" resultType="java.lang.Integer" >
    select count(*)
    from `task`
    INNER JOIN `task_status` on task.status_id = task_status.id
    where founder_id = #{id,jdbcType=INTEGER}
  </select>

  <select id="committeeStateCount" resultType="java.lang.Integer" >
    select count(*)
    from `task`
    INNER JOIN `task_status` on task.status_id = task_status.id
    where founder_id = #{id,jdbcType=INTEGER} and task.status_id = #{statusId,jdbcType=INTEGER}
  </select>

  <select id="selectByEditId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    task.*,task_status.name AS state_name
    from `task`
    INNER JOIN `task_status` on task.status_id = task_status.id
    where executor_id = #{id,jdbcType=INTEGER}
  </select>

  <select id="selectByEditAndState" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    task.*,task_status.name AS state_name
    from `task`
    INNER JOIN `task_status` on task.status_id = task_status.id
    where executor_id = #{id,jdbcType=INTEGER} and task.status_id = #{statusId,jdbcType=INTEGER}
  </select>

  <select id="editAllCount" resultType="java.lang.Integer" >
    select count(*)
    from `task`
    INNER JOIN `task_status` on task.status_id = task_status.id
    where executor_id = #{id,jdbcType=INTEGER}
  </select>

  <select id="editStateCount" resultType="java.lang.Integer" >
    select count(*)
    from `task`
    INNER JOIN `task_status` on task.status_id = task_status.id
    where executor_id = #{id,jdbcType=INTEGER} and task.status_id = #{statusId,jdbcType=INTEGER}
  </select>

  <select id="selectTaskViewByState" resultType="java.lang.Integer" resultMap="BaseResultMap" >
    select
    task.*,task_status.name AS state_name
    from `task`
    INNER JOIN `task_status` on task.status_id = task_status.id
    where status_id = #{id,jdbcType=INTEGER}
  </select>

  <select id="taskViewStateCount" resultType="java.lang.Integer" >
    select count(*)
    from `task`
    where status_id = #{id,jdbcType=INTEGER}
  </select>




  <select id="selectByExpertId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    task.*,task_status.name AS state_name
    from `task`
    INNER JOIN `task_status` on task.status_id = task_status.id
    where committee_id = #{id,jdbcType=INTEGER}
  </select>

  <select id="selectByExpertAndState" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    task.*,task_status.name AS state_name
    from `task`
    INNER JOIN `task_status` on task.status_id = task_status.id
    where committee_id = #{id,jdbcType=INTEGER} and task.status_id = #{statusId,jdbcType=INTEGER}
  </select>

  <select id="allExpertCount" resultType="java.lang.Integer" >
    select count(*)
    from `task`
    INNER JOIN `task_status` on task.status_id = task_status.id
    where committee_id = #{id,jdbcType=INTEGER}
  </select>

  <select id="experStateCount" resultType="java.lang.Integer" >
    select count(*)
    from `task`
    INNER JOIN `task_status` on task.status_id = task_status.id
    where committee_id = #{id,jdbcType=INTEGER} and task.status_id = #{statusId,jdbcType=INTEGER}
  </select>
</mapper>